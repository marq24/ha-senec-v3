# https://www.home-assistant.io/integrations/template
# https://www.home-assistant.io/docs/configuration/templating/

template:
  - trigger:
      - trigger: state
        entity_id:
          - sensor.tibber_prices
          - sensor.electricity_price_mmphome
          - sensor.senec_battery_charge_percent
          - sensor.energy_production_today_remaining_sum

      - trigger: time_pattern
        hours: "/1"
        minutes: "0"
        seconds: "36"

    sensor:
      - name: "POW last updated"
        unique_id: pow_last_updated
        device_class: timestamp
        state: >
          {% import 'powx_const.jinja' as i %}
          {{i.update_data()|as_datetime}}

      - name: "POW average price all"
        unique_id: pow_avg_price_all
        state_class: measurement
        unit_of_measurement: "€/kWh"
        state: >
          {% import 'powx_const.jinja' as i %}
          {% set val = states(i.tibb_prices_rest_sensor)|lower %}
          {% if val not in ['unknown', 'none', 'unavailable'] -%}
            {% set prices_data = (state_attr(i.tibb_prices_rest_sensor, 'today')) | map(attribute='total') | list + (state_attr(i.tibb_prices_rest_sensor, 'tomorrow')) | map(attribute='total') | list %}
            {% set times_data = (state_attr(i.tibb_prices_rest_sensor, 'today')) | map(attribute='startsAt') | map('as_datetime') | list + (state_attr(i.tibb_prices_rest_sensor, 'tomorrow')) | map(attribute='startsAt') | map('as_datetime') | list %}
          {%- else -%}
            {% set prices_data = [] %}
            {% set times_data = [] %}
          {%- endif %}

          {% if prices_data|length > 0 %}
          {{average(prices_data)|round(4)}}
          {% else %}
          {{None}}
          {% endif %}

      - name: "POW average price Tibber"
        unique_id: pow_avg_price_tibber
        state_class: measurement
        unit_of_measurement: "€/kWh"
        state: >
          {% import 'powx_const.jinja' as i %}
          {% set val = state_attr(i.your_tibber_home_sensor, 'avg_price')|lower %}
          {% if val not in ['unknown', 'none', 'unavailable'] -%}
          {{val|float|round(3)}}
          {%- else -%}
          {{None}}
          {%- endif %}

      - name: "POW average price from now"
        unique_id: pow_avg_price_from_now
        state_class: measurement
        unit_of_measurement: "€/kWh"
        state: >
          {% import 'powx_const.jinja' as i %}
          {% set val = states(i.tibb_prices_rest_sensor)|lower %}
          {% if val not in ['unknown', 'none', 'unavailable'] -%}
            {% set prices_data = (state_attr(i.tibb_prices_rest_sensor, 'today')) | map(attribute='total') | list + (state_attr(i.tibb_prices_rest_sensor, 'tomorrow')) | map(attribute='total') | list %}
            {% set times_data = (state_attr(i.tibb_prices_rest_sensor, 'today')) | map(attribute='startsAt') | map('as_datetime') | list + (state_attr(i.tibb_prices_rest_sensor, 'tomorrow')) | map(attribute='startsAt') | map('as_datetime') | list %}
          {%- else -%}
            {% set prices_data = [] %}
            {% set times_data = [] %}
          {%- endif %}
          {% set ns_now = namespace(idx=-1) %}
          {%- for i in range(0, times_data|length) -%}
              {%- if now() < times_data[ i ] -%}
                  {% set ns_now.idx = max(0, i-1) %}
                  {% break %}
              {%- endif -%}
          {%- endfor -%}
          {% set now_idx = ns_now.idx %}
          {% set now_max = min(now_idx + i.chk_hours, prices_data|length) %}

          {% set val = state_attr(i.your_tibber_home_sensor, 'avg_price')|lower %}
          {% if val not in ['unknown', 'none', 'unavailable'] -%}
          {{ average(prices_data[now_idx:now_max], val|float)|round(4) }}
          {%- else -%}
          {{ average(prices_data[now_idx:now_max])|round(4) }}
          {%- endif %}

      - name: "POW low price start"
        unique_id: pow_low_price_start
        device_class: timestamp
        state: >
          {% import 'powx_const.jinja' as i %}
          {% set val = states(i.tibb_prices_rest_sensor)|lower %}
          {% if val not in ['unknown', 'none', 'unavailable'] -%}
            {% set prices_data = (state_attr(i.tibb_prices_rest_sensor, 'today')) | map(attribute='total') | list + (state_attr(i.tibb_prices_rest_sensor, 'tomorrow')) | map(attribute='total') | list %}
            {% set times_data = (state_attr(i.tibb_prices_rest_sensor, 'today')) | map(attribute='startsAt') | map('as_datetime') | list + (state_attr(i.tibb_prices_rest_sensor, 'tomorrow')) | map(attribute='startsAt') | map('as_datetime') | list %}
          {%- else -%}
            {% set prices_data = [] %}
            {% set times_data = [] %}
          {%- endif %}

          {% set ns_now = namespace(idx=-1) %}
          {%- for i in range(0, times_data|length) -%}
              {%- if now() < times_data[ i ] -%}
                  {% set ns_now.idx = max(0, i-1) %}
                  {% break %}
              {%- endif -%}
          {%- endfor -%}
          {% set now_idx = ns_now.idx %}
          {% set now_max = min(now_idx + i.chk_hours, prices_data|length) %}
          {% set val = state_attr(i.your_tibber_home_sensor, 'avg_price')|lower %}
          {% if val not in ['unknown', 'none', 'unavailable'] -%}
              {% set avgprice_ahead = average(prices_data[now_idx:now_max], val|float)|round(4) %}
              {% set avgprice_min = min(avgprice_ahead, val|float) %}
          {%- else -%}
              {% set avgprice_ahead = average(prices_data[now_idx:now_max])|round(4) %}
              {% set avgprice_min = avgprice_ahead %}
          {%- endif %}
          {% set ns_low = namespace(startidx=99, endidx=-1) %}
          {%- for i in range(now_idx, now_max) -%}
              {%- if avgprice_min > prices_data[i] -%}
                  {% set ns_low.startidx = min(i, ns_low.startidx) %}
              {%- elif ns_low.startidx == 99 -%}
              {%- else -%}
                  {% break %}
              {%- endif -%}
          {%- endfor -%}

          {%- if ns_low.startidx < 99 -%}
          {{times_data[ns_low.startidx]|as_datetime}}
          {%- else -%}
          {{None}}
          {%- endif -%}

      - name: "POW low price end"
        unique_id: pow_low_price_end
        device_class: timestamp
        state: >
          {% import 'powx_const.jinja' as i %}
          {% set val = states(i.tibb_prices_rest_sensor)|lower %}
          {% if val not in ['unknown', 'none', 'unavailable'] -%}
            {% set prices_data = (state_attr(i.tibb_prices_rest_sensor, 'today')) | map(attribute='total') | list + (state_attr(i.tibb_prices_rest_sensor, 'tomorrow')) | map(attribute='total') | list %}
            {% set times_data = (state_attr(i.tibb_prices_rest_sensor, 'today')) | map(attribute='startsAt') | map('as_datetime') | list + (state_attr(i.tibb_prices_rest_sensor, 'tomorrow')) | map(attribute='startsAt') | map('as_datetime') | list %}
          {%- else -%}
            {% set prices_data = [] %}
            {% set times_data = [] %}
          {%- endif %}
          {% set ns_now = namespace(idx=-1) %}
          {%- for i in range(0, times_data|length) -%}
              {%- if now() < times_data[ i ] -%}
                  {% set ns_now.idx = max(0, i-1) %}
                  {% break %}
              {%- endif -%}
          {%- endfor -%}
          {% set now_idx = ns_now.idx %}
          {% set now_max = min(now_idx + i.chk_hours, prices_data|length) %}
          {% set val = state_attr(i.your_tibber_home_sensor, 'avg_price')|lower %}
          {% if val not in ['unknown', 'none', 'unavailable'] -%}
              {% set avgprice_ahead = average(prices_data[now_idx:now_max], val|float)|round(4) %}
              {% set avgprice_min = min(avgprice_ahead, val|float) %}
          {%- else -%}
              {% set avgprice_ahead = average(prices_data[now_idx:now_max])|round(4) %}
              {% set avgprice_min = avgprice_ahead %}
          {%- endif %}
          {% set ns_low = namespace(startidx=99, endidx=-1) %}
          {%- for i in range(now_idx, prices_data|length) -%}
              {%- if avgprice_min > prices_data[i] -%}
                  {% set ns_low.endidx = max(i, ns_low.endidx) %}
              {%- elif ns_low.endidx == -1 -%}
              {%- else -%}
                  {% break %}
              {%- endif -%}
          {%- endfor -%}

          {%- if ns_low.endidx > -1 -%}
          {{times_data[ns_low.endidx]|as_datetime + timedelta(minutes=59, seconds=59)}}
          {%- else -%}
          {{None}}
          {%- endif -%}

      - name: "POW low price duration"
        unique_id: pow_low_price_duration
        device_class: duration
        state: >
          {% import 'powx_const.jinja' as i %}
          {% set val = states(i.tibb_prices_rest_sensor)|lower %}
          {% if val not in ['unknown', 'none', 'unavailable'] -%}
            {% set prices_data = (state_attr(i.tibb_prices_rest_sensor, 'today')) | map(attribute='total') | list + (state_attr(i.tibb_prices_rest_sensor, 'tomorrow')) | map(attribute='total') | list %}
            {% set times_data = (state_attr(i.tibb_prices_rest_sensor, 'today')) | map(attribute='startsAt') | map('as_datetime') | list + (state_attr(i.tibb_prices_rest_sensor, 'tomorrow')) | map(attribute='startsAt') | map('as_datetime') | list %}
          {%- else -%}
            {% set prices_data = [] %}
            {% set times_data = [] %}
          {%- endif %}
          {% set ns_now = namespace(idx=-1) %}
          {%- for i in range(0, times_data|length) -%}
              {%- if now() < times_data[ i ] -%}
                  {% set ns_now.idx = max(0, i-1) %}
                  {% break %}
              {%- endif -%}
          {%- endfor -%}
          {% set now_idx = ns_now.idx %}
          {% set now_max = min(now_idx + i.chk_hours, prices_data|length) %}
          {% set val = state_attr(i.your_tibber_home_sensor, 'avg_price')|lower %}
          {% if val not in ['unknown', 'none', 'unavailable'] -%}
              {% set avgprice_ahead = average(prices_data[now_idx:now_max], val|float)|round(4) %}
              {% set avgprice_min = min(avgprice_ahead, val|float) %}
          {%- else -%}
              {% set avgprice_ahead = average(prices_data[now_idx:now_max])|round(4) %}
              {% set avgprice_min = avgprice_ahead %}
          {%- endif %}
          {% set ns_low = namespace(startidx=99, endidx=-1) %}
          {%- for i in range(now_idx, now_max) -%}
              {%- if avgprice_min > prices_data[i] -%}
                  {% set ns_low.startidx = min(i, ns_low.startidx) %}
              {%- elif ns_low.startidx == 99 -%}
              {%- else -%}
                  {% break %}
              {%- endif -%}
          {%- endfor -%}
          {%- if ns_low.startidx < 99 -%}
              {% set low_price_startidx = ns_low.startidx %}
          {%- else -%}
              {% set low_price_startidx = None %}
          {%- endif -%}
          {%- for i in range(now_idx, prices_data|length) -%}
              {%- if avgprice_min > prices_data[i] -%}
                  {% set ns_low.endidx = max(i, ns_low.endidx) %}
              {%- elif ns_low.endidx == -1 -%}
              {%- else -%}
                  {% break %}
              {%- endif -%}
          {%- endfor -%}
          {%- if ns_low.endidx > -1 -%}
              {% set low_price_endidx = ns_low.endidx %}
          {%- else -%}
              {% set low_price_endidx = None %}
          {%- endif -%}

          {%- if low_price_endidx is not none and low_price_startidx is not none -%}
          {{ (low_price_endidx - low_price_startidx) + 1|round(0) }}
          {%- else -%}
          {{None}}
          {%- endif -%}

      - name: "POW cheapest start"
        unique_id: pow_cheapest_start
        device_class: timestamp
        state: >
          {% import 'powx_const.jinja' as i %}
          {% set val = states(i.tibb_prices_rest_sensor)|lower %}
          {% if val not in ['unknown', 'none', 'unavailable'] -%}
            {% set prices_data = (state_attr(i.tibb_prices_rest_sensor, 'today')) | map(attribute='total') | list + (state_attr(i.tibb_prices_rest_sensor, 'tomorrow')) | map(attribute='total') | list %}
            {% set times_data = (state_attr(i.tibb_prices_rest_sensor, 'today')) | map(attribute='startsAt') | map('as_datetime') | list + (state_attr(i.tibb_prices_rest_sensor, 'tomorrow')) | map(attribute='startsAt') | map('as_datetime') | list %}
          {%- else -%}
            {% set prices_data = [] %}
            {% set times_data = [] %}
          {%- endif %}
          {% set val = states(i.your_battery_soc_sensor)|lower %}
          {% if val not in ['unknown', 'none', 'unavailable'] -%}
              {% set accu_soc = val|int %}
          {%- else -%}
              {% set accu_soc = 0|int %}
          {%- endif %}
          {%- if accu_soc < i.accu_min_full_soc -%}
              {% set accu_need = (i.accu_capacity - (i.accu_capacity_soc_factor * (accu_soc|float)))|round(4) %}
              {% set battery_full_charge_duration = max(1, (accu_need / i.accu_charge_rate)|round(1)) %}
          {%- else -%}
              {% set battery_full_charge_duration = 0 %}
          {%- endif -%}
          {% set ns_now = namespace(idx=-1) %}
          {%- for i in range(0, times_data|length) -%}
              {%- if now() < times_data[ i ] -%}
                  {% set ns_now.idx = max(0, i-1) %}
                  {% break %}
              {%- endif -%}
          {%- endfor -%}
          {% set now_idx = ns_now.idx %}
          {% set now_max = min(now_idx + i.chk_hours, prices_data|length) %}
          {% set val = state_attr(i.your_tibber_home_sensor, 'avg_price')|lower %}
          {% if val not in ['unknown', 'none', 'unavailable'] -%}
              {% set avgprice_ahead = average(prices_data[now_idx:now_max], val|float)|round(4) %}
              {% set avgprice_min = min(avgprice_ahead, val|float) %}
          {%- else -%}
              {% set avgprice_ahead = average(prices_data[now_idx:now_max])|round(4) %}
              {% set avgprice_min = avgprice_ahead %}
          {%- endif %}
          {% set ns_low = namespace(startidx=99, endidx=-1) %}
          {%- for i in range(now_idx, now_max) -%}
              {%- if avgprice_min > prices_data[i] -%}
                  {% set ns_low.startidx = min(i, ns_low.startidx) %}
              {%- elif ns_low.startidx == 99 -%}
              {%- else -%}
                  {% break %}
              {%- endif -%}
          {%- endfor -%}
          {%- if ns_low.startidx < 99 -%}
              {% set low_price_startidx = ns_low.startidx %}
          {%- else -%}
              {% set low_price_startidx = None %}
          {%- endif -%}
          {%- for i in range(now_idx, prices_data|length) -%}
              {%- if avgprice_min > prices_data[i] -%}
                  {% set ns_low.endidx = max(i, ns_low.endidx) %}
              {%- elif ns_low.endidx == -1 -%}
              {%- else -%}
                  {% break %}
              {%- endif -%}
          {%- endfor -%}
          {%- if ns_low.endidx > -1 -%}
              {% set low_price_endidx = ns_low.endidx %}
          {%- else -%}
              {% set low_price_endidx = None %}
          {%- endif -%}
          {%- if low_price_endidx is not none and low_price_startidx is not none -%}
              {% set low_price_duration = (low_price_endidx - low_price_startidx) + 1|round(0) %}
          {%- else -%}
              {% set low_price_duration = None %}
          {%- endif -%}
          {# ...and battery_full_charge_duration < (low_price_duration-1) #}
          {# skip the check, if the possible window is large enough that the battery can be fully loaded #}
          {%- if low_price_duration is not none and low_price_duration > 0 and battery_full_charge_duration > 0 -%}
              {% set ns_pmin = namespace(startidx=99, endidx=-1) %}
              {% set min_price = min(prices_data[now_idx:now_max]) %}
              {% set min_price_idx = now_idx + prices_data[now_idx:now_max].index(min_price) %}
              {% set ns_pmin.startidx = min_price_idx %}
              {% set ns_pmin.endidx = min_price_idx %}
              {%- for i in range(1, i.chk_hours) -%}
                  {% set lowidx = max(0, ns_pmin.startidx - 1) %}
                  {% set highidx = min(ns_pmin.endidx + 1, (prices_data|length) - 1) %}
                  {%- if prices_data[lowidx] == prices_data[highidx] -%}
                      {% set ns_pmin.startidx = lowidx %}
                      {% set ns_pmin.endidx = highidx %}
                  {%- elif prices_data[lowidx] < prices_data[highidx] -%}
                      {% set ns_pmin.startidx = lowidx %}
                  {%- else -%}
                      {% set ns_pmin.endidx = highidx %}
                  {%- endif -%}
                  {%- if ns_pmin.endidx - ns_pmin.startidx >= battery_full_charge_duration -%}
                      {% break %}
                  {%- endif -%}
              {%- endfor -%}
              {% set min_price_startidx = ns_pmin.startidx %}
              {% set min_price_endidx = ns_pmin.endidx %}
          {%- else -%}
              {% set min_price_startidx = None %}
              {% set min_price_endidx = None %}
          {%- endif -%}

          {%- if min_price_startidx is not none -%}
          {{times_data[min_price_startidx]|as_datetime}}
          {%- else -%}
          {{None}}
          {%- endif -%}

      - name: "POW cheapest end"
        unique_id: pow_cheapest_end
        device_class: timestamp
        state: >
          {% import 'powx_const.jinja' as i %}
          {% set val = states(i.tibb_prices_rest_sensor)|lower %}
          {% if val not in ['unknown', 'none', 'unavailable'] -%}
            {% set prices_data = (state_attr(i.tibb_prices_rest_sensor, 'today')) | map(attribute='total') | list + (state_attr(i.tibb_prices_rest_sensor, 'tomorrow')) | map(attribute='total') | list %}
            {% set times_data = (state_attr(i.tibb_prices_rest_sensor, 'today')) | map(attribute='startsAt') | map('as_datetime') | list + (state_attr(i.tibb_prices_rest_sensor, 'tomorrow')) | map(attribute='startsAt') | map('as_datetime') | list %}
          {%- else -%}
            {% set prices_data = [] %}
            {% set times_data = [] %}
          {%- endif %}
          {% set val = states(i.your_battery_soc_sensor)|lower %}
          {% if val not in ['unknown', 'none', 'unavailable'] -%}
              {% set accu_soc = val|int %}
          {%- else -%}
              {% set accu_soc = 0|int %}
          {%- endif %}
          {%- if accu_soc < i.accu_min_full_soc -%}
              {% set accu_need = (i.accu_capacity - (i.accu_capacity_soc_factor * (accu_soc|float)))|round(4) %}
              {% set battery_full_charge_duration = max(1, (accu_need / i.accu_charge_rate)|round(1)) %}
          {%- else -%}
              {% set battery_full_charge_duration = 0 %}
          {%- endif -%}
          {% set ns_now = namespace(idx=-1) %}
          {%- for i in range(0, times_data|length) -%}
              {%- if now() < times_data[ i ] -%}
                  {% set ns_now.idx = max(0, i-1) %}
                  {% break %}
              {%- endif -%}
          {%- endfor -%}
          {% set now_idx = ns_now.idx %}
          {% set now_max = min(now_idx + i.chk_hours, prices_data|length) %}
          {% set val = state_attr(i.your_tibber_home_sensor, 'avg_price')|lower %}
          {% if val not in ['unknown', 'none', 'unavailable'] -%}
              {% set avgprice_ahead = average(prices_data[now_idx:now_max], val|float)|round(4) %}
              {% set avgprice_min = min(avgprice_ahead, val|float) %}
          {%- else -%}
              {% set avgprice_ahead = average(prices_data[now_idx:now_max])|round(4) %}
              {% set avgprice_min = avgprice_ahead %}
          {%- endif %}
          {% set ns_low = namespace(startidx=99, endidx=-1) %}
          {%- for i in range(now_idx, now_max) -%}
              {%- if avgprice_min > prices_data[i] -%}
                  {% set ns_low.startidx = min(i, ns_low.startidx) %}
              {%- elif ns_low.startidx == 99 -%}
              {%- else -%}
                  {% break %}
              {%- endif -%}
          {%- endfor -%}
          {%- if ns_low.startidx < 99 -%}
              {% set low_price_startidx = ns_low.startidx %}
          {%- else -%}
              {% set low_price_startidx = None %}
          {%- endif -%}
          {%- for i in range(now_idx, prices_data|length) -%}
              {%- if avgprice_min > prices_data[i] -%}
                  {% set ns_low.endidx = max(i, ns_low.endidx) %}
              {%- elif ns_low.endidx == -1 -%}
              {%- else -%}
                  {% break %}
              {%- endif -%}
          {%- endfor -%}
          {%- if ns_low.endidx > -1 -%}
              {% set low_price_endidx = ns_low.endidx %}
          {%- else -%}
              {% set low_price_endidx = None %}
          {%- endif -%}
          {%- if low_price_endidx is not none and low_price_startidx is not none -%}
              {% set low_price_duration = (low_price_endidx - low_price_startidx) + 1|round(0) %}
          {%- else -%}
              {% set low_price_duration = None %}
          {%- endif -%}
          {# ...and battery_full_charge_duration < (low_price_duration-1) #}
          {# skip the check, if the possible window is large enough that the battery can be fully loaded #}
          {%- if low_price_duration is not none and low_price_duration > 0 and battery_full_charge_duration > 0 -%}
              {% set ns_pmin = namespace(startidx=99, endidx=-1) %}
              {% set min_price = min(prices_data[now_idx:now_max]) %}
              {% set min_price_idx = now_idx + prices_data[now_idx:now_max].index(min_price) %}
              {% set ns_pmin.startidx = min_price_idx %}
              {% set ns_pmin.endidx = min_price_idx %}
              {%- for i in range(1, i.chk_hours) -%}
                  {% set lowidx = max(0, ns_pmin.startidx - 1) %}
                  {% set highidx = min(ns_pmin.endidx + 1, (prices_data|length) - 1) %}
                  {%- if prices_data[lowidx] == prices_data[highidx] -%}
                      {% set ns_pmin.startidx = lowidx %}
                      {% set ns_pmin.endidx = highidx %}
                  {%- elif prices_data[lowidx] < prices_data[highidx] -%}
                      {% set ns_pmin.startidx = lowidx %}
                  {%- else -%}
                      {% set ns_pmin.endidx = highidx %}
                  {%- endif -%}
                  {%- if ns_pmin.endidx - ns_pmin.startidx >= battery_full_charge_duration -%}
                      {% break %}
                  {%- endif -%}
              {%- endfor -%}
              {% set min_price_startidx = ns_pmin.startidx %}
              {% set min_price_endidx = ns_pmin.endidx %}
          {%- else -%}
              {% set min_price_startidx = None %}
              {% set min_price_endidx = None %}
          {%- endif -%}

          {%- if min_price_endidx is not none -%}
          {{times_data[min_price_endidx]|as_datetime + timedelta(minutes=59, seconds=59)}}
          {%- else -%}
          {{None}}
          {%- endif -%}

      - name: "POW cheapest duration"
        unique_id: pow_cheapest_duration
        device_class: duration
        state: >
          {% import 'powx_const.jinja' as i %}
          {% set val = states(i.tibb_prices_rest_sensor)|lower %}
          {% if val not in ['unknown', 'none', 'unavailable'] -%}
            {% set prices_data = (state_attr(i.tibb_prices_rest_sensor, 'today')) | map(attribute='total') | list + (state_attr(i.tibb_prices_rest_sensor, 'tomorrow')) | map(attribute='total') | list %}
            {% set times_data = (state_attr(i.tibb_prices_rest_sensor, 'today')) | map(attribute='startsAt') | map('as_datetime') | list + (state_attr(i.tibb_prices_rest_sensor, 'tomorrow')) | map(attribute='startsAt') | map('as_datetime') | list %}
          {%- else -%}
            {% set prices_data = [] %}
            {% set times_data = [] %}
          {%- endif %}
          {% set val = states(i.your_battery_soc_sensor)|lower %}
          {% if val not in ['unknown', 'none', 'unavailable'] -%}
              {% set accu_soc = val|int %}
          {%- else -%}
              {% set accu_soc = 0|int %}
          {%- endif %}
          {%- if accu_soc < i.accu_min_full_soc -%}
              {% set accu_need = (i.accu_capacity - (i.accu_capacity_soc_factor * (accu_soc|float)))|round(4) %}
              {% set battery_full_charge_duration = max(1, (accu_need / i.accu_charge_rate)|round(1)) %}
          {%- else -%}
              {% set battery_full_charge_duration = 0 %}
          {%- endif -%}
          {% set ns_now = namespace(idx=-1) %}
          {%- for i in range(0, times_data|length) -%}
              {%- if now() < times_data[ i ] -%}
                  {% set ns_now.idx = max(0, i-1) %}
                  {% break %}
              {%- endif -%}
          {%- endfor -%}
          {% set now_idx = ns_now.idx %}
          {% set now_max = min(now_idx + i.chk_hours, prices_data|length) %}
          {% set val = state_attr(i.your_tibber_home_sensor, 'avg_price')|lower %}
          {% if val not in ['unknown', 'none', 'unavailable'] -%}
              {% set avgprice_ahead = average(prices_data[now_idx:now_max], val|float)|round(4) %}
              {% set avgprice_min = min(avgprice_ahead, val|float) %}
          {%- else -%}
              {% set avgprice_ahead = average(prices_data[now_idx:now_max])|round(4) %}
              {% set avgprice_min = avgprice_ahead %}
          {%- endif %}
          {% set ns_low = namespace(startidx=99, endidx=-1) %}
          {%- for i in range(now_idx, now_max) -%}
              {%- if avgprice_min > prices_data[i] -%}
                  {% set ns_low.startidx = min(i, ns_low.startidx) %}
              {%- elif ns_low.startidx == 99 -%}
              {%- else -%}
                  {% break %}
              {%- endif -%}
          {%- endfor -%}
          {%- if ns_low.startidx < 99 -%}
              {% set low_price_startidx = ns_low.startidx %}
          {%- else -%}
              {% set low_price_startidx = None %}
          {%- endif -%}
          {%- for i in range(now_idx, prices_data|length) -%}
              {%- if avgprice_min > prices_data[i] -%}
                  {% set ns_low.endidx = max(i, ns_low.endidx) %}
              {%- elif ns_low.endidx == -1 -%}
              {%- else -%}
                  {% break %}
              {%- endif -%}
          {%- endfor -%}
          {%- if ns_low.endidx > -1 -%}
              {% set low_price_endidx = ns_low.endidx %}
          {%- else -%}
              {% set low_price_endidx = None %}
          {%- endif -%}
          {%- if low_price_endidx is not none and low_price_startidx is not none -%}
              {% set low_price_duration = (low_price_endidx - low_price_startidx) + 1|round(0) %}
          {%- else -%}
              {% set low_price_duration = None %}
          {%- endif -%}
          {# ...and battery_full_charge_duration < (low_price_duration-1) #}
          {# skip the check, if the possible window is large enough that the battery can be fully loaded #}
          {%- if low_price_duration is not none and low_price_duration > 0 and battery_full_charge_duration > 0 -%}
              {% set ns_pmin = namespace(startidx=99, endidx=-1) %}
              {% set min_price = min(prices_data[now_idx:now_max]) %}
              {% set min_price_idx = now_idx + prices_data[now_idx:now_max].index(min_price) %}
              {% set ns_pmin.startidx = min_price_idx %}
              {% set ns_pmin.endidx = min_price_idx %}
              {%- for i in range(1, i.chk_hours) -%}
                  {% set lowidx = max(0, ns_pmin.startidx - 1) %}
                  {% set highidx = min(ns_pmin.endidx + 1, (prices_data|length) - 1) %}
                  {%- if prices_data[lowidx] == prices_data[highidx] -%}
                      {% set ns_pmin.startidx = lowidx %}
                      {% set ns_pmin.endidx = highidx %}
                  {%- elif prices_data[lowidx] < prices_data[highidx] -%}
                      {% set ns_pmin.startidx = lowidx %}
                  {%- else -%}
                      {% set ns_pmin.endidx = highidx %}
                  {%- endif -%}
                  {%- if ns_pmin.endidx - ns_pmin.startidx >= battery_full_charge_duration -%}
                      {% break %}
                  {%- endif -%}
              {%- endfor -%}
              {% set min_price_startidx = ns_pmin.startidx %}
              {% set min_price_endidx = ns_pmin.endidx %}
          {%- else -%}
              {% set min_price_startidx = None %}
              {% set min_price_endidx = None %}
          {%- endif -%}

          {%- if min_price_endidx is not none and min_price_startidx is not none -%}
          {{(min_price_endidx - min_price_startidx) + 1|round(0)}}
          {%- else -%}
          {{None}}
          {%- endif -%}

      - name: "POW high price start"
        unique_id: pow_high_price_start
        device_class: timestamp
        state: >
          {% import 'powx_const.jinja' as i %}
          {% set val = states(i.tibb_prices_rest_sensor)|lower %}
          {% if val not in ['unknown', 'none', 'unavailable'] -%}
            {% set prices_data = (state_attr(i.tibb_prices_rest_sensor, 'today')) | map(attribute='total') | list + (state_attr(i.tibb_prices_rest_sensor, 'tomorrow')) | map(attribute='total') | list %}
            {% set times_data = (state_attr(i.tibb_prices_rest_sensor, 'today')) | map(attribute='startsAt') | map('as_datetime') | list + (state_attr(i.tibb_prices_rest_sensor, 'tomorrow')) | map(attribute='startsAt') | map('as_datetime') | list %}
          {%- else -%}
            {% set prices_data = [] %}
            {% set times_data = [] %}
          {%- endif %}
          {% set home_consumption_remain = (24 - (now().strftime('%H')|int) - 2) * i.kw_per_hour %}
          {% set val = states(i.your_pv_prognose_sensor)|lower %}
          {% if val not in ['unknown', 'none', 'unavailable'] -%}
              {% set pv_production_remain = val|float %}
          {%- else -%}
              {% set pv_production_remain = 0.0|float %}
          {%- endif %}
          {% set remain_prod_energy = max(0, pv_production_remain - home_consumption_remain)|round(3) %}
          {% set val = states(i.your_battery_soc_sensor)|lower %}
          {% if val not in ['unknown', 'none', 'unavailable'] -%}
              {% set accu_soc = val|int %}
          {%- else -%}
              {% set accu_soc = 0|int %}
          {%- endif %}
          {% set accu_energy = (i.accu_capacity_soc_factor * (accu_soc|float))|round(4) %}
          {% set max_energy_duration = ((accu_energy + remain_prod_energy) / i.kw_per_hour)|round(3) %}
          {% set max_energy_duration_h = max_energy_duration|round(0) %}
          {% set ns_now = namespace(idx=-1) %}
          {%- for i in range(0, times_data|length) -%}
              {%- if now() < times_data[ i ] -%}
                  {% set ns_now.idx = max(0, i-1) %}
                  {% break %}
              {%- endif -%}
          {%- endfor -%}
          {% set now_idx = ns_now.idx %}
          {% set now_max = min(now_idx + i.chk_hours, prices_data|length) %}
          {% set val = state_attr(i.your_tibber_home_sensor, 'avg_price')|lower %}
          {% if val not in ['unknown', 'none', 'unavailable'] -%}
              {% set avgprice_ahead = average(prices_data[now_idx:now_max], val|float)|round(4) %}
              {% set avgprice_min = min(avgprice_ahead, val|float) %}
          {%- else -%}
              {% set avgprice_ahead = average(prices_data[now_idx:now_max])|round(4) %}
              {% set avgprice_min = avgprice_ahead %}
          {%- endif %}
          {% set max_price = max(prices_data[now_idx:now_max]) %}
          {% set max_price_idx = now_idx + prices_data[now_idx:now_max].index(max_price) %}
          {% set ns_pmax = namespace(startidx=99, endidx=-1) %}
          {% set ns_pmax.startidx = max_price_idx %}
          {% set ns_pmax.endidx = max_price_idx %}
          {%- for i in range(1, max(max_energy_duration_h, i.chk_hours))-%}
              {% set lowidx = max(0, ns_pmax.startidx - 1) %}
              {% set highidx = min(ns_pmax.endidx + 1, (prices_data|length) - 1) %}
              {% set isLowCheaper = prices_data[lowidx] < avgprice_min %}
              {% set isHighCheaper = prices_data[highidx] < avgprice_min %}
              {%- if (ns_pmax.endidx - ns_pmax.startidx >= max_energy_duration) -%}
                  {% break %}
              {%- endif -%}
              {%- if prices_data[lowidx] == prices_data[highidx] -%}
                  {%- if not isLowCheaper -%}
                      {% set ns_pmax.startidx = lowidx %}
                  {%- endif -%}
                  {%- if not isHighCheaper -%}
                      {% set ns_pmax.endidx = highidx %}
                  {%- endif -%}
              {%- elif prices_data[lowidx] > prices_data[highidx] -%}
                  {%- if not isLowCheaper -%}
                      {% set ns_pmax.startidx = lowidx %}
                  {%- endif -%}
              {%- else -%}
                  {%- if not isHighCheaper -%}
                      {% set ns_pmax.endidx = highidx %}
                  {%- endif -%}
              {%- endif -%}
          {%- endfor -%}
          {%- if ns_pmax.startidx < 99 and ns_pmax.startidx > -1 -%}
              {% set max_price_startidx = ns_pmax.startidx %}
              {% set max_price_endidx = ns_pmax.endidx %}
          {%- else -%}
              {% set max_price_startidx = None %}
              {% set max_price_endidx = None %}
          {%- endif -%}

          {%- if max_price_startidx is not none -%}
          {{times_data[max_price_startidx]|as_datetime}}
          {%- else -%}
          {{None}}
          {%- endif -%}

      - name: "POW high price end"
        unique_id: pow_high_price_end
        device_class: timestamp
        state: >
          {% import 'powx_const.jinja' as i %}
          {% set val = states(i.tibb_prices_rest_sensor)|lower %}
          {% if val not in ['unknown', 'none', 'unavailable'] -%}
            {% set prices_data = (state_attr(i.tibb_prices_rest_sensor, 'today')) | map(attribute='total') | list + (state_attr(i.tibb_prices_rest_sensor, 'tomorrow')) | map(attribute='total') | list %}
            {% set times_data = (state_attr(i.tibb_prices_rest_sensor, 'today')) | map(attribute='startsAt') | map('as_datetime') | list + (state_attr(i.tibb_prices_rest_sensor, 'tomorrow')) | map(attribute='startsAt') | map('as_datetime') | list %}
          {%- else -%}
            {% set prices_data = [] %}
            {% set times_data = [] %}
          {%- endif %}
          {% set home_consumption_remain = (24 - (now().strftime('%H')|int) - 2) * i.kw_per_hour %}
          {% set val = states(i.your_pv_prognose_sensor)|lower %}
          {% if val not in ['unknown', 'none', 'unavailable'] -%}
              {% set pv_production_remain = val|float %}
          {%- else -%}
              {% set pv_production_remain = 0.0|float %}
          {%- endif %}
          {% set remain_prod_energy = max(0, pv_production_remain - home_consumption_remain)|round(3) %}
          {% set val = states(i.your_battery_soc_sensor)|lower %}
          {% if val not in ['unknown', 'none', 'unavailable'] -%}
              {% set accu_soc = val|int %}
          {%- else -%}
              {% set accu_soc = 0|int %}
          {%- endif %}
          {% set accu_energy = (i.accu_capacity_soc_factor * (accu_soc|float))|round(4) %}
          {% set max_energy_duration = ((accu_energy + remain_prod_energy) / i.kw_per_hour)|round(3) %}
          {% set max_energy_duration_h = max_energy_duration|round(0) %}
          {% set ns_now = namespace(idx=-1) %}
          {%- for i in range(0, times_data|length) -%}
              {%- if now() < times_data[ i ] -%}
                  {% set ns_now.idx = max(0, i-1) %}
                  {% break %}
              {%- endif -%}
          {%- endfor -%}
          {% set now_idx = ns_now.idx %}
          {% set now_max = min(now_idx + i.chk_hours, prices_data|length) %}
          {% set val = state_attr(i.your_tibber_home_sensor, 'avg_price')|lower %}
          {% if val not in ['unknown', 'none', 'unavailable'] -%}
              {% set avgprice_ahead = average(prices_data[now_idx:now_max], val|float)|round(4) %}
              {% set avgprice_min = min(avgprice_ahead, val|float) %}
          {%- else -%}
              {% set avgprice_ahead = average(prices_data[now_idx:now_max])|round(4) %}
              {% set avgprice_min = avgprice_ahead %}
          {%- endif %}
          {% set max_price = max(prices_data[now_idx:now_max]) %}
          {% set max_price_idx = now_idx + prices_data[now_idx:now_max].index(max_price) %}
          {% set ns_pmax = namespace(startidx=99, endidx=-1) %}
          {% set ns_pmax.startidx = max_price_idx %}
          {% set ns_pmax.endidx = max_price_idx %}
          {%- for i in range(1, max(max_energy_duration_h, i.chk_hours))-%}
              {% set lowidx = max(0, ns_pmax.startidx - 1) %}
              {% set highidx = min(ns_pmax.endidx + 1, (prices_data|length) - 1) %}
              {% set isLowCheaper = prices_data[lowidx] < avgprice_min %}
              {% set isHighCheaper = prices_data[highidx] < avgprice_min %}
              {%- if (ns_pmax.endidx - ns_pmax.startidx >= max_energy_duration) -%}
                  {% break %}
              {%- endif -%}
              {%- if prices_data[lowidx] == prices_data[highidx] -%}
                  {%- if not isLowCheaper -%}
                      {% set ns_pmax.startidx = lowidx %}
                  {%- endif -%}
                  {%- if not isHighCheaper -%}
                      {% set ns_pmax.endidx = highidx %}
                  {%- endif -%}
              {%- elif prices_data[lowidx] > prices_data[highidx] -%}
                  {%- if not isLowCheaper -%}
                      {% set ns_pmax.startidx = lowidx %}
                  {%- endif -%}
              {%- else -%}
                  {%- if not isHighCheaper -%}
                      {% set ns_pmax.endidx = highidx %}
                  {%- endif -%}
              {%- endif -%}
          {%- endfor -%}
          {%- if ns_pmax.startidx < 99 and ns_pmax.startidx > -1 -%}
              {% set max_price_startidx = ns_pmax.startidx %}
              {% set max_price_endidx = ns_pmax.endidx %}
          {%- else -%}
              {% set max_price_startidx = None %}
              {% set max_price_endidx = None %}
          {%- endif -%}

          {%- if max_price_endidx is not none -%}
          {{times_data[max_price_endidx]|as_datetime + timedelta(minutes=59, seconds=59)}}
          {%- else -%}
          {{None}}
          {%- endif -%}

      - name: "POW high price duration"
        unique_id: pow_high_price_duration
        device_class: duration
        state: >
          {% import 'powx_const.jinja' as i %}
          {% set val = states(i.tibb_prices_rest_sensor)|lower %}
          {% if val not in ['unknown', 'none', 'unavailable'] -%}
            {% set prices_data = (state_attr(i.tibb_prices_rest_sensor, 'today')) | map(attribute='total') | list + (state_attr(i.tibb_prices_rest_sensor, 'tomorrow')) | map(attribute='total') | list %}
            {% set times_data = (state_attr(i.tibb_prices_rest_sensor, 'today')) | map(attribute='startsAt') | map('as_datetime') | list + (state_attr(i.tibb_prices_rest_sensor, 'tomorrow')) | map(attribute='startsAt') | map('as_datetime') | list %}
          {%- else -%}
            {% set prices_data = [] %}
            {% set times_data = [] %}
          {%- endif %}
          {% set home_consumption_remain = (24 - (now().strftime('%H')|int) - 2) * i.kw_per_hour %}
          {% set val = states(i.your_pv_prognose_sensor)|lower %}
          {% if val not in ['unknown', 'none', 'unavailable'] -%}
              {% set pv_production_remain = val|float %}
          {%- else -%}
              {% set pv_production_remain = 0.0|float %}
          {%- endif %}
          {% set remain_prod_energy = max(0, pv_production_remain - home_consumption_remain)|round(3) %}
          {% set val = states(i.your_battery_soc_sensor)|lower %}
          {% if val not in ['unknown', 'none', 'unavailable'] -%}
              {% set accu_soc = val|int %}
          {%- else -%}
              {% set accu_soc = 0|int %}
          {%- endif %}
          {% set accu_energy = (i.accu_capacity_soc_factor * (accu_soc|float))|round(4) %}
          {% set max_energy_duration = ((accu_energy + remain_prod_energy) / i.kw_per_hour)|round(3) %}
          {% set max_energy_duration_h = max_energy_duration|round(0) %}
          {% set ns_now = namespace(idx=-1) %}
          {%- for i in range(0, times_data|length) -%}
              {%- if now() < times_data[ i ] -%}
                  {% set ns_now.idx = max(0, i-1) %}
                  {% break %}
              {%- endif -%}
          {%- endfor -%}
          {% set now_idx = ns_now.idx %}
          {% set now_max = min(now_idx + i.chk_hours, prices_data|length) %}
          {% set val = state_attr(i.your_tibber_home_sensor, 'avg_price')|lower %}
          {% if val not in ['unknown', 'none', 'unavailable'] -%}
              {% set avgprice_ahead = average(prices_data[now_idx:now_max], val|float)|round(4) %}
              {% set avgprice_min = min(avgprice_ahead, val|float) %}
          {%- else -%}
              {% set avgprice_ahead = average(prices_data[now_idx:now_max])|round(4) %}
              {% set avgprice_min = avgprice_ahead %}
          {%- endif %}
          {% set max_price = max(prices_data[now_idx:now_max]) %}
          {% set max_price_idx = now_idx + prices_data[now_idx:now_max].index(max_price) %}
          {% set ns_pmax = namespace(startidx=99, endidx=-1) %}
          {% set ns_pmax.startidx = max_price_idx %}
          {% set ns_pmax.endidx = max_price_idx %}
          {%- for i in range(1, max(max_energy_duration_h, i.chk_hours))-%}
              {% set lowidx = max(0, ns_pmax.startidx - 1) %}
              {% set highidx = min(ns_pmax.endidx + 1, (prices_data|length) - 1) %}
              {% set isLowCheaper = prices_data[lowidx] < avgprice_min %}
              {% set isHighCheaper = prices_data[highidx] < avgprice_min %}
              {%- if (ns_pmax.endidx - ns_pmax.startidx >= max_energy_duration) -%}
                  {% break %}
              {%- endif -%}
              {%- if prices_data[lowidx] == prices_data[highidx] -%}
                  {%- if not isLowCheaper -%}
                      {% set ns_pmax.startidx = lowidx %}
                  {%- endif -%}
                  {%- if not isHighCheaper -%}
                      {% set ns_pmax.endidx = highidx %}
                  {%- endif -%}
              {%- elif prices_data[lowidx] > prices_data[highidx] -%}
                  {%- if not isLowCheaper -%}
                      {% set ns_pmax.startidx = lowidx %}
                  {%- endif -%}
              {%- else -%}
                  {%- if not isHighCheaper -%}
                      {% set ns_pmax.endidx = highidx %}
                  {%- endif -%}
              {%- endif -%}
          {%- endfor -%}
          {%- if ns_pmax.startidx < 99 and ns_pmax.startidx > -1 -%}
              {% set max_price_startidx = ns_pmax.startidx %}
              {% set max_price_endidx = ns_pmax.endidx %}
          {%- else -%}
              {% set max_price_startidx = None %}
              {% set max_price_endidx = None %}
          {%- endif -%}

          {%- if max_price_endidx is not none and max_price_startidx is not none -%}
          {{((max_price_endidx - max_price_startidx) + 1)|round(0)}}
          {% else %}
          {{None}}
          {% endif %}

      - name: "POW PV (remaining prod - home usage)]"
        unique_id: pow_pv_remaining_prod_home_usage
        state_class: measurement
        unit_of_measurement: "kWh"
        state: >
          {% import 'powx_const.jinja' as i %}
          {% set val = states(i.your_pv_prognose_sensor)|lower %}
          {% if val not in ['unknown', 'none', 'unavailable'] -%}
              {% set pv_production_remain = val|float %}
          {%- else -%}
              {% set pv_production_remain = 0.0|float %}
          {%- endif %}
          {% set home_consumption_remain = (24 - (now().strftime('%H')|int) - 2) * i.kw_per_hour %}
          {% set remain_prod_energy = max(0, pv_production_remain - home_consumption_remain)|round(3) %}

          {{remain_prod_energy}}

      - name: "POW battery full charge required energy"
        unique_id: pow_battery_full_charge_required_energy
        state_class: measurement
        unit_of_measurement: "kWh"
        state: >
          {% import 'powx_const.jinja' as i %}
          {% set val = states(i.your_battery_soc_sensor)|lower %}
          {% if val not in ['unknown', 'none', 'unavailable'] -%}
              {% set accu_soc = val|int %}
          {%- else -%}
              {% set accu_soc = 0|int %}
          {%- endif %}
          {{ (i.accu_capacity - (i.accu_capacity_soc_factor * (accu_soc|float)))|round(4) }}

      - name: "POW battery full charge duration"
        unique_id: pow_battery_full_charge_duration
        device_class: duration
        state: >
          {% import 'powx_const.jinja' as i %}
          {% set val = states(i.your_battery_soc_sensor)|lower %}
          {% if val not in ['unknown', 'none', 'unavailable'] -%}
              {% set accu_soc = val|int %}
          {%- else -%}
              {% set accu_soc = 0|int %}
          {%- endif %}
          {%- if accu_soc < i.accu_min_full_soc -%}
              {% set accu_need = (i.accu_capacity - (i.accu_capacity_soc_factor * (accu_soc|float)))|round(4) %}
              {% set battery_full_charge_duration = max(1, (accu_need / i.accu_charge_rate)|round(1)) %}
          {%- else -%}
              {% set battery_full_charge_duration = 0 %}
          {%- endif -%}

          {{battery_full_charge_duration}}

      - name: "POW available energy duration [Battery + PV (remaining - home usage)]"
        unique_id: pow_available_energy_duration_battery_pv_remaining_home_usage
        device_class: duration
        state: >
          {% import 'powx_const.jinja' as i %}
          {% set val = states(i.your_pv_prognose_sensor)|lower %}
          {% if val not in ['unknown', 'none', 'unavailable'] -%}
              {% set pv_production_remain = val|float %}
          {%- else -%}
              {% set pv_production_remain = 0.0|float %}
          {%- endif %}
          {% set home_consumption_remain = (24 - (now().strftime('%H')|int) - 2) * i.kw_per_hour %}
          {% set remain_prod_energy = max(0, pv_production_remain - home_consumption_remain)|round(3) %}
          {% set val = states(i.your_battery_soc_sensor)|lower %}
          {% if val not in ['unknown', 'none', 'unavailable'] -%}
              {% set accu_soc = val|int %}
          {%- else -%}
              {% set accu_soc = 0|int %}
          {%- endif %}
          {% set accu_energy = (i.accu_capacity_soc_factor * (accu_soc|float))|round(4) %}
          {% set max_energy_duration = ((accu_energy + remain_prod_energy) / i.kw_per_hour)|round(3) %}

          {{max_energy_duration}}

    binary_sensor:
      - name: "POW PV power can fully load battery"
        unique_id: pow_pv_power_can_fully_load_battery
        state: >
          {% import 'powx_const.jinja' as i %}
          {% set val = states(i.your_battery_soc_sensor)|lower %}
          {% if val not in ['unknown', 'none', 'unavailable'] -%}
              {% set accu_soc = val|int %}
          {%- else -%}
              {% set accu_soc = 0|int %}
          {%- endif %}
          {% set accu_need = (i.accu_capacity - (i.accu_capacity_soc_factor * (accu_soc|float)))|round(4) %}
          {% set val = states(i.your_pv_prognose_sensor)|lower %}
          {% if val not in ['unknown', 'none', 'unavailable'] -%}
              {% set pv_production_remain = val|float %}
          {%- else -%}
              {% set pv_production_remain = 0.0|float %}
          {%- endif %}
          {% set home_consumption_remain = (24 - (now().strftime('%H')|int) - 2) * i.kw_per_hour %}
          {% set remain_prod_energy = max(0, pv_production_remain - home_consumption_remain)|round(3) %}

          {%- if accu_need > 0 and (remain_prod_energy) > accu_need -%}
          {{'on'}}
          {%- else -%}
          {{'off'}}
          {%- endif -%}

      - name: "POW now in low price phase"
        unique_id: pow_now_in_low_price_phase
        state: >
          {% import 'powx_const.jinja' as i %}
          {% set val = states(i.tibb_prices_rest_sensor)|lower %}
          {% if val not in ['unknown', 'none', 'unavailable'] -%}
            {% set prices_data = (state_attr(i.tibb_prices_rest_sensor, 'today')) | map(attribute='total') | list + (state_attr(i.tibb_prices_rest_sensor, 'tomorrow')) | map(attribute='total') | list %}
            {% set times_data = (state_attr(i.tibb_prices_rest_sensor, 'today')) | map(attribute='startsAt') | map('as_datetime') | list + (state_attr(i.tibb_prices_rest_sensor, 'tomorrow')) | map(attribute='startsAt') | map('as_datetime') | list %}
          {%- else -%}
            {% set prices_data = [] %}
            {% set times_data = [] %}
          {%- endif %}
          {% set ns_now = namespace(idx=-1) %}
          {%- for i in range(0, times_data|length) -%}
              {%- if now() < times_data[ i ] -%}
                  {% set ns_now.idx = max(0, i-1) %}
                  {% break %}
              {%- endif -%}
          {%- endfor -%}
          {% set now_idx = ns_now.idx %}
          {% set now_max = min(now_idx + i.chk_hours, prices_data|length) %}
          {% set val = state_attr(i.your_tibber_home_sensor, 'avg_price')|lower %}
          {% if val not in ['unknown', 'none', 'unavailable'] -%}
              {% set avgprice_ahead = average(prices_data[now_idx:now_max], val|float)|round(4) %}
              {% set avgprice_min = min(avgprice_ahead, val|float) %}
          {%- else -%}
              {% set avgprice_ahead = average(prices_data[now_idx:now_max])|round(4) %}
              {% set avgprice_min = avgprice_ahead %}
          {%- endif %}
          {% set ns_low = namespace(startidx=99, endidx=-1) %}
          {%- for i in range(now_idx, now_max) -%}
              {%- if avgprice_min > prices_data[i] -%}
                  {% set ns_low.startidx = min(i, ns_low.startidx) %}
              {%- elif ns_low.startidx == 99 -%}
              {%- else -%}
                  {% break %}
              {%- endif -%}
          {%- endfor -%}
          {%- if ns_low.startidx < 99 -%}
              {% set low_price_startidx = ns_low.startidx %}
          {%- else -%}
              {% set low_price_startidx = None %}
          {%- endif -%}
          {%- for i in range(now_idx, prices_data|length) -%}
              {%- if avgprice_min > prices_data[i] -%}
                  {% set ns_low.endidx = max(i, ns_low.endidx) %}
              {%- elif ns_low.endidx == -1 -%}
              {%- else -%}
                  {% break %}
              {%- endif -%}
          {%- endfor -%}
          {%- if ns_low.endidx > -1 -%}
              {% set low_price_endidx = ns_low.endidx %}
          {%- else -%}
              {% set low_price_endidx = None %}
          {%- endif -%}

          {%- if low_price_startidx is not none and low_price_endidx is not none and (low_price_startidx <= now_idx <= low_price_endidx) -%}
          {{'on'}}
          {%- else -%}
          {{'off'}}
          {%- endif -%}

      - name: "POW now in cheapest phase"
        unique_id: pow_now_in_cheapest_phase
        state: >
          {% import 'powx_const.jinja' as i %}
          {% set val = states(i.tibb_prices_rest_sensor)|lower %}
          {% if val not in ['unknown', 'none', 'unavailable'] -%}
            {% set prices_data = (state_attr(i.tibb_prices_rest_sensor, 'today')) | map(attribute='total') | list + (state_attr(i.tibb_prices_rest_sensor, 'tomorrow')) | map(attribute='total') | list %}
            {% set times_data = (state_attr(i.tibb_prices_rest_sensor, 'today')) | map(attribute='startsAt') | map('as_datetime') | list + (state_attr(i.tibb_prices_rest_sensor, 'tomorrow')) | map(attribute='startsAt') | map('as_datetime') | list %}
          {%- else -%}
            {% set prices_data = [] %}
            {% set times_data = [] %}
          {%- endif %}
          {% set val = states(i.your_battery_soc_sensor)|lower %}
          {% if val not in ['unknown', 'none', 'unavailable'] -%}
              {% set accu_soc = val|int %}
          {%- else -%}
              {% set accu_soc = 0|int %}
          {%- endif %}
          {%- if accu_soc < i.accu_min_full_soc -%}
              {% set accu_need = (i.accu_capacity - (i.accu_capacity_soc_factor * (accu_soc|float)))|round(4) %}
              {% set battery_full_charge_duration = max(1, (accu_need / i.accu_charge_rate)|round(1)) %}
          {%- else -%}
              {% set battery_full_charge_duration = 0 %}
          {%- endif -%}
          {% set ns_now = namespace(idx=-1) %}
          {%- for i in range(0, times_data|length) -%}
              {%- if now() < times_data[ i ] -%}
                  {% set ns_now.idx = max(0, i-1) %}
                  {% break %}
              {%- endif -%}
          {%- endfor -%}
          {% set now_idx = ns_now.idx %}
          {% set now_max = min(now_idx + i.chk_hours, prices_data|length) %}
          {% set val = state_attr(i.your_tibber_home_sensor, 'avg_price')|lower %}
          {% if val not in ['unknown', 'none', 'unavailable'] -%}
              {% set avgprice_ahead = average(prices_data[now_idx:now_max], val|float)|round(4) %}
              {% set avgprice_min = min(avgprice_ahead, val|float) %}
          {%- else -%}
              {% set avgprice_ahead = average(prices_data[now_idx:now_max])|round(4) %}
              {% set avgprice_min = avgprice_ahead %}
          {%- endif %}
          {% set ns_low = namespace(startidx=99, endidx=-1) %}
          {%- for i in range(now_idx, now_max) -%}
              {%- if avgprice_min > prices_data[i] -%}
                  {% set ns_low.startidx = min(i, ns_low.startidx) %}
              {%- elif ns_low.startidx == 99 -%}
              {%- else -%}
                  {% break %}
              {%- endif -%}
          {%- endfor -%}
          {%- if ns_low.startidx < 99 -%}
              {% set low_price_startidx = ns_low.startidx %}
          {%- else -%}
              {% set low_price_startidx = None %}
          {%- endif -%}
          {%- for i in range(now_idx, prices_data|length) -%}
              {%- if avgprice_min > prices_data[i] -%}
                  {% set ns_low.endidx = max(i, ns_low.endidx) %}
              {%- elif ns_low.endidx == -1 -%}
              {%- else -%}
                  {% break %}
              {%- endif -%}
          {%- endfor -%}
          {%- if ns_low.endidx > -1 -%}
              {% set low_price_endidx = ns_low.endidx %}
          {%- else -%}
              {% set low_price_endidx = None %}
          {%- endif -%}
          {%- if low_price_endidx is not none and low_price_startidx is not none -%}
              {% set low_price_duration = (low_price_endidx - low_price_startidx) + 1|round(0) %}
          {%- else -%}
              {% set low_price_duration = None %}
          {%- endif -%}
          {# ...and battery_full_charge_duration < (low_price_duration-1) #}
          {# skip the check, if the possible window is large enough that the battery can be fully loaded #}
          {%- if low_price_duration is not none and low_price_duration > 0 and battery_full_charge_duration > 0 -%}
              {% set ns_pmin = namespace(startidx=99, endidx=-1) %}
              {% set min_price = min(prices_data[now_idx:now_max]) %}
              {% set min_price_idx = now_idx + prices_data[now_idx:now_max].index(min_price) %}
              {% set ns_pmin.startidx = min_price_idx %}
              {% set ns_pmin.endidx = min_price_idx %}
              {%- for i in range(1, i.chk_hours) -%}
                  {% set lowidx = max(0, ns_pmin.startidx - 1) %}
                  {% set highidx = min(ns_pmin.endidx + 1, (prices_data|length) - 1) %}
                  {%- if prices_data[lowidx] == prices_data[highidx] -%}
                      {% set ns_pmin.startidx = lowidx %}
                      {% set ns_pmin.endidx = highidx %}
                  {%- elif prices_data[lowidx] < prices_data[highidx] -%}
                      {% set ns_pmin.startidx = lowidx %}
                  {%- else -%}
                      {% set ns_pmin.endidx = highidx %}
                  {%- endif -%}
                  {%- if ns_pmin.endidx - ns_pmin.startidx >= battery_full_charge_duration -%}
                      {% break %}
                  {%- endif -%}
              {%- endfor -%}
              {% set min_price_startidx = ns_pmin.startidx %}
              {% set min_price_endidx = ns_pmin.endidx %}
          {%- else -%}
              {% set min_price_startidx = None %}
              {% set min_price_endidx = None %}
          {%- endif -%}

          {%- if min_price_endidx is not none and min_price_startidx is not none -%}
            {%- if min_price_startidx <= now_idx <= min_price_endidx -%}
          {{'on'}}
            {%- else -%}
          {{'off'}}
            {%- endif -%}
          {%- else -%}
          {{'off'}}
          {%- endif -%}

      - name: "POW now in high price phase"
        unique_id: pow_now_in_high_price_phase
        state: >
          {% import 'powx_const.jinja' as i %}
          {% set val = states(i.tibb_prices_rest_sensor)|lower %}
          {% if val not in ['unknown', 'none', 'unavailable'] -%}
            {% set prices_data = (state_attr(i.tibb_prices_rest_sensor, 'today')) | map(attribute='total') | list + (state_attr(i.tibb_prices_rest_sensor, 'tomorrow')) | map(attribute='total') | list %}
            {% set times_data = (state_attr(i.tibb_prices_rest_sensor, 'today')) | map(attribute='startsAt') | map('as_datetime') | list + (state_attr(i.tibb_prices_rest_sensor, 'tomorrow')) | map(attribute='startsAt') | map('as_datetime') | list %}
          {%- else -%}
            {% set prices_data = [] %}
            {% set times_data = [] %}
          {%- endif %}
          {% set home_consumption_remain = (24 - (now().strftime('%H')|int) - 2) * i.kw_per_hour %}
          {% set val = states(i.your_pv_prognose_sensor)|lower %}
          {% if val not in ['unknown', 'none', 'unavailable'] -%}
              {% set pv_production_remain = val|float %}
          {%- else -%}
              {% set pv_production_remain = 0.0|float %}
          {%- endif %}
          {% set remain_prod_energy = max(0, pv_production_remain - home_consumption_remain)|round(3) %}
          {% set val = states(i.your_battery_soc_sensor)|lower %}
          {% if val not in ['unknown', 'none', 'unavailable'] -%}
              {% set accu_soc = val|int %}
          {%- else -%}
              {% set accu_soc = 0|int %}
          {%- endif %}
          {% set accu_energy = (i.accu_capacity_soc_factor * (accu_soc|float))|round(4) %}
          {% set max_energy_duration = ((accu_energy + remain_prod_energy) / i.kw_per_hour)|round(3) %}
          {% set max_energy_duration_h = max_energy_duration|round(0) %}
          {% set ns_now = namespace(idx=-1) %}
          {%- for i in range(0, times_data|length) -%}
              {%- if now() < times_data[ i ] -%}
                  {% set ns_now.idx = max(0, i-1) %}
                  {% break %}
              {%- endif -%}
          {%- endfor -%}
          {% set now_idx = ns_now.idx %}
          {% set now_max = min(now_idx + i.chk_hours, prices_data|length) %}
          {% set val = state_attr(i.your_tibber_home_sensor, 'avg_price')|lower %}
          {% if val not in ['unknown', 'none', 'unavailable'] -%}
              {% set avgprice_ahead = average(prices_data[now_idx:now_max], val|float)|round(4) %}
              {% set avgprice_min = min(avgprice_ahead, val|float) %}
          {%- else -%}
              {% set avgprice_ahead = average(prices_data[now_idx:now_max])|round(4) %}
              {% set avgprice_min = avgprice_ahead %}
          {%- endif %}
          {% set max_price = max(prices_data[now_idx:now_max]) %}
          {% set max_price_idx = now_idx + prices_data[now_idx:now_max].index(max_price) %}
          {% set ns_pmax = namespace(startidx=99, endidx=-1) %}
          {% set ns_pmax.startidx = max_price_idx %}
          {% set ns_pmax.endidx = max_price_idx %}
          {%- for i in range(1, max(max_energy_duration_h, i.chk_hours))-%}
              {% set lowidx = max(0, ns_pmax.startidx - 1) %}
              {% set highidx = min(ns_pmax.endidx + 1, (prices_data|length) - 1) %}
              {% set isLowCheaper = prices_data[lowidx] < avgprice_min %}
              {% set isHighCheaper = prices_data[highidx] < avgprice_min %}
              {%- if (ns_pmax.endidx - ns_pmax.startidx >= max_energy_duration) -%}
                  {% break %}
              {%- endif -%}
              {%- if prices_data[lowidx] == prices_data[highidx] -%}
                  {%- if not isLowCheaper -%}
                      {% set ns_pmax.startidx = lowidx %}
                  {%- endif -%}
                  {%- if not isHighCheaper -%}
                      {% set ns_pmax.endidx = highidx %}
                  {%- endif -%}
              {%- elif prices_data[lowidx] > prices_data[highidx] -%}
                  {%- if not isLowCheaper -%}
                      {% set ns_pmax.startidx = lowidx %}
                  {%- endif -%}
              {%- else -%}
                  {%- if not isHighCheaper -%}
                      {% set ns_pmax.endidx = highidx %}
                  {%- endif -%}
              {%- endif -%}
          {%- endfor -%}
          {%- if ns_pmax.startidx < 99 and ns_pmax.startidx > -1 -%}
              {% set max_price_startidx = ns_pmax.startidx %}
              {% set max_price_endidx = ns_pmax.endidx %}
          {%- else -%}
              {% set max_price_startidx = None %}
              {% set max_price_endidx = None %}
          {%- endif -%}

          {%- if max_price_endidx is not none and max_price_startidx is not none -%}
            {%- if max_price_startidx <= now_idx <= max_price_endidx -%}
          {{'on'}}
            {%- else -%}
          {{'off'}}
            {%- endif -%}
          {%- else -%}
          {{'off'}}
          {%- endif -%}