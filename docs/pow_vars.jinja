{# hours to look ahead for all our calculations #}
{% set chk_hours = "12"|int %}

{# the capacity of the home battery in kW/h #}
{% set accu_capacity = "12"|int %}
{% set accu_capacity_soc_factor = "0.12"|float %}

{# the state of charge of the battery in percent that be considered as full #}
{% set accu_min_full_soc = "95"|int %}

{# the incremental in one hour of battery charging (from the network) in kW/h #}
{% set accu_charge_rate = "2.04"|float %}

{# the average home consumption per hour in kW/h #}
{% set kw_per_hour = "0.75"|float %}

{% set tibb_prices_rest_sensor = 'sensor.tibber_prices' %}
{% set your_tibber_home_sensor = 'sensor.electricity_price_mmphome' %}
{% set your_pv_prognose_sensor = 'sensor.energy_production_today_remaining_sum' %}
{% set your_battery_soc_sensor = 'sensor.senec_battery_charge_percent' %}

{# ############################ #}
{# END-OF-CONFIGURATION-OPTIONS #}
{# ############################ #}
{% macro trigger_test() -%}
    {{now()}}
{%- endmacro %}

{% set home_consumption_remain = (24 - (now().strftime('%H')|int) - 2) * kw_per_hour %}
{% set val = states(your_battery_soc_sensor) %}
{% if val not in ['unknown', 'none', 'unavailable'] -%}
    {% set accu_soc = val|int %}
{%- else -%}
    {% set accu_soc = 0|int %}
{%- endif %}

{% set accu_energy = (accu_capacity_soc_factor * (accu_soc|float))|round(4) %}
{% set accu_need = (accu_capacity - (accu_capacity_soc_factor * (accu_soc|float)))|round(4) %}
{% set val = states(your_pv_prognose_sensor)|lower %}
{% if val not in ['unknown', 'none', 'unavailable'] -%}
    {% set pv_production_remain = val|float %}
{%- else -%}
    {% set pv_production_remain = 0.0|float %}
{%- endif %}

{% set val = states(tibb_prices_rest_sensor)|lower %}
{% if val not in ['unknown', 'none', 'unavailable'] -%}
    {% set prices_data = (state_attr(tibb_prices_rest_sensor, 'today')) | map(attribute='total') | list + (state_attr(tibb_prices_rest_sensor, 'tomorrow')) | map(attribute='total') | list %}
    {% set times_data = (state_attr(tibb_prices_rest_sensor, 'today')) | map(attribute='startsAt') | map('as_datetime') | list + (state_attr(tibb_prices_rest_sensor, 'tomorrow')) | map(attribute='startsAt') | map('as_datetime') | list %}
{%- else -%}
    {% set prices_data = [] %}
    {% set times_data = [] %}
{%- endif %}

{% set val = state_attr(your_tibber_home_sensor, 'avg_price')|lower %}
{% if val not in ['unknown', 'none', 'unavailable'] -%}
    {% set tibb_avg_price = val|float %}
{%- else -%}
    {% set tibb_avg_price = None %}
{%- endif %}

{% macro now_idxX() -%}
    {% set ns = namespace(idx=-1)  %}
    {%- for i in range(0, times_data|length) -%}
        {%- if now() < times_data[ i ] -%}
            {% set ns.idx = max(0, i-1)  %}
            {% break %}
        {%- endif -%}
    {%- endfor -%}
    {{ns.idx}}
{%- endmacro %}
{%- set now_idx = now_idxX()|int %}
{%- set now_idxmax = min(now_idx + chk_hours, prices_data|length) %}

{% if tibb_avg_price is not none -%}
    {% set avgprice_ahead = average(prices_data[now_idx:now_idxmax], tibb_avg_price)|round(4) %}"
    {% set avgprice_min = min(avgprice_ahead, tibb_avg_price) %}"
{%- else -%}
    {% set avgprice_ahead = average(prices_data[now_idx:now_idxmax])|round(4) %}"
    {% set avgprice_min = avgprice_ahead %}"
{%- endif %}

{% macro low_price_startidxX() -%}
    {% set ns_low = namespace(startidx=99, endidx=-1)  %}
    {%- for i in range(now_idx, now_idxmax) -%}
        {%- if avgprice_min > prices_data[i] -%}
            {% set ns_low.startidx = min(i, ns_low.startidx)  %}
        {%- elif ns_low.startidx == 99 -%}
        {%- else -%}
            {% break %}
        {%- endif -%}
    {%- endfor -%}
    {%- if ns_low.startidx < 99 -%}
        {{ns_low.startidx}}
    {%- else -%}
        {{'None'}}
    {%- endif -%}
{%- endmacro %}
{% set val = low_price_startidxX()|lower %}
{% if val not in ['unknown', 'none', 'unavailable'] -%}
    {% set low_price_startidx = val|int %}
{%- else -%}
    {% set low_price_startidx = None %}
{%- endif %}

{# the 'correct' implementation for the end index would be, that the 'range' will go from #}
{# now_idx to now_idxmax -> but for the low price period we can ignore the 'chk_hours' #}
{# and just run through the complete prices_data array... #}
{# so instead of: #}
{# {%- for i in range(now_idx, now_idxmax) -%} #}
{# we use: #}
{# {%- for i in range(now_idx, prices_data|length) -%} #}
{% macro low_price_endidxX() -%}
    {% set ns_low = namespace(startidx=99, endidx=-1)  %}
    {%- for i in range(now_idx, prices_data|length) -%}
        {%- if avgprice_min > prices_data[i] -%}
            {% set ns_low.endidx = max(i, ns_low.endidx)  %}
        {%- elif ns_low.endidx == -1 -%}
        {%- else -%}
            {% break %}
        {%- endif -%}
    {%- endfor -%}
    {%- if ns_low.endidx > -1 -%}
        {{ns_low.endidx}}
    {%- else -%}
        {{'None'}}
    {%- endif -%}
{%- endmacro %}
{% set val = low_price_endidxX()|lower %}
{% if val not in ['unknown', 'none', 'unavailable'] -%}
    {% set low_price_endidx = val|int %}
{%- else -%}
    {% set low_price_endidx = None %}
{%- endif %}

{# LOW PRICE - DURATION #}
{# #################### #}
{%- if low_price_endidx is not none and low_price_startidx is not none -%}
    {% set low_price_duration = (low_price_endidx - low_price_startidx) + 1|round(0) %}
{%- else -%}
    {% set low_price_duration = None %}
{%- endif -%}

{# MIN PRICE STUFF  #}
{# ################ #}

{%- if accu_soc < accu_min_full_soc  -%}
    {% set battery_full_charge_duration = max(1, (accu_need / accu_charge_rate)|round(1))  %}
{%- else -%}
    {% set battery_full_charge_duration = None  %}
{%- endif -%}

{# ...and battery_full_charge_duration < (low_price_duration-1) #}
{# skip the check, if the possible window is large enough that the battery can be fully loaded #}
{%- if low_price_duration is not none and low_price_duration > 0 and battery_full_charge_duration > 0 -%}
    {% set ns_pmin = namespace(startidx=99, endidx=-1, maxidx=prices_data|length)  %}
    {% set min_price = min(prices_data[now_idx:now_idxmax])  %}
    {% set min_price_idx = prices_data.index(min_price)  %}
    {% set ns_pmin.startidx = min_price_idx  %}
    {% set ns_pmin.endidx = min_price_idx  %}
    {%- for i in range(1, chk_hours) -%}
        {% set lowidx = max(0, ns_pmin.startidx - 1)  %}
        {% set highidx = min(ns_pmin.endidx + 1, ns_pmin.maxidx)  %}
        {%- if prices_data[lowidx] == prices_data[highidx] -%}
            {% set ns_pmin.startidx = lowidx  %}
            {% set ns_pmin.endidx = highidx  %}
        {%- elif prices_data[lowidx] < prices_data[highidx] -%}
            {% set ns_pmin.startidx = lowidx  %}
        {%- else -%}
            {% set ns_pmin.endidx = highidx  %}
        {%- endif -%}
        {%- if ns_pmin.endidx - ns_pmin.startidx >= battery_full_charge_duration -%}
            {% break %}
        {%- endif -%}
    {%- endfor -%}
    {% set min_price_startidx = ns_pmin.startidx %}
    {% set min_price_endidx = ns_pmin.endidx %}
{%- else -%}
    {% set min_price_startidx = None %}
    {% set min_price_endidx = None %}
{%- endif -%}

{%- if min_price_endidx is not none and min_price_startidx is not none -%}
    {% set min_price_duration = (min_price_endidx - min_price_startidx) + 1|round(0) %}
{%- else -%}
    {% set min_price_duration = None %}
{%- endif -%}

{# MAX PRICE STUFF  #}
{# ################ #}

{% set remain_prod_energy = max(0, pv_production_remain - home_consumption_remain)|round(3)  %}
{% set max_energy_duration = ((accu_energy + remain_prod_energy) / kw_per_hour)|round(3)  %}
{% set max_energy_duration_h = max_energy_duration|round(0)  %}
{% set max_price = max(prices_data[now_idx:now_idxmax])  %}
{% set max_price_idx = prices_data.index(max_price)  %}
{% set ns_pmax = namespace(startidx=99, endidx=-1, maxidx=prices_data|length)  %}
{% set ns_pmax.startidx = max_price_idx  %}
{% set ns_pmax.endidx = max_price_idx  %}
{%- for i in range(1, max(max_energy_duration_h, chk_hours))-%}
    {% set lowidx = max(0, ns_pmax.startidx - 1)  %}
    {% set highidx = min(ns_pmax.endidx + 1, ns_pmax.maxidx)  %}
    {% set isLowCheaper = prices_data[lowidx] < avgprice_min  %}
    {% set isHighCheaper = prices_data[highidx] < avgprice_min  %}
    {%- if (ns_pmax.endidx - ns_pmax.startidx >= max_energy_duration) -%}
        {% break %}
    {%- endif -%}
    {%- if prices_data[lowidx] == prices_data[highidx] -%}
        {%- if not isLowCheaper -%}
            {% set ns_pmax.startidx = lowidx  %}
        {%- endif -%}
        {%- if not isHighCheaper -%}
            {% set ns_pmax.endidx = highidx  %}
        {%- endif -%}
    {%- elif prices_data[lowidx] > prices_data[highidx] -%}
        {%- if not isLowCheaper -%}
            {% set ns_pmax.startidx = lowidx  %}
        {%- endif -%}
    {%- else -%}
        {%- if not isHighCheaper -%}
            {% set ns_pmax.endidx = highidx  %}
        {%- endif -%}
    {%- endif -%}
{%- endfor -%}
{%- if ns_pmax.startidx < 99 and ns_pmax.startidx > -1 -%}
    {% set max_price_startidx = ns_pmax.startidx  %}
    {% set max_price_endidx = ns_pmax.endidx %}
{%- else -%}
    {% set max_price_startidx = None  %}
    {% set max_price_endidx = None %}
{%- endif -%}

{%- if max_price_endidx is not none and max_price_startidx is not none -%}
    {% set max_price_duration = (max_price_endidx - max_price_startidx) + 1|round(0) %}
{%- else -%}
    {% set max_price_duration = None %}
{%- endif -%}